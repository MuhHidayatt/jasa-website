<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class CustomerController extends Controller
{
    /**
     * Display a paginated list of customers with search and filtering
     */
    public function index(Request $request)
    {
        $query = Customer::query()->withCount('orders');

        // Search functionality
        if ($request->has('search')) {
            $search = $request->input('search');
            $query->where(function($q) use ($search) {
                $q->where('name_customer', 'like', "%$search%")
                  ->orWhere('email', 'like', "%$search%")
                  ->orWhere('phone', 'like', "%$search%")
                  ->orWhere('kode_customer', 'like', "%$search%")
                  ->orWhere('address', 'like', "%$search%");
            });
        }

        // Sorting functionality
        $sortOptions = [
            'latest' => ['created_at', 'desc'],
            'oldest' => ['created_at', 'asc'],
            'name_asc' => ['name_customer', 'asc'],
            'name_desc' => ['name_customer', 'desc'],
            'most_orders' => ['orders_count', 'desc'],
            'least_orders' => ['orders_count', 'asc']
        ];

        $sort = $request->input('sort', 'latest');
        if (array_key_exists($sort, $sortOptions)) {
            $query->orderBy(...$sortOptions[$sort]);
        }

        // Additional filters can be added here
        if ($request->has('has_orders')) {
            if ($request->input('has_orders') === 'yes') {
                $query->has('orders');
            } elseif ($request->input('has_orders') === 'no') {
                $query->doesntHave('orders');
            }
        }

        // Paginate with query parameters
        $customers = $query->paginate(10)->appends($request->query());

        return view('customers.index', compact('customers'));
    }

    /**
     * Show the form for creating a new customer
     */
    public function create()
    {
        return view('customers.create');
    }

    /**
     * Store a newly created customer in storage
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'kode_customer' => 'nullable|string|max:20|unique:customers,kode_customer',
            'name_customer' => 'required|string|max:50',
            'email' => 'nullable|email|max:50',
            'phone' => 'nullable|string|max:15',
            'address' => 'nullable|string'
        ]);

        // If kode_customer is empty, it will be auto-generated by the model
        Customer::create($validated);

        return redirect()
            ->route('customers.index')
            ->with('success', 'Customer berhasil ditambahkan.');
    }

    /**
     * Display the specified customer
     */
    public function show($id)
    {
        $customer = Customer::with(['orders' => function($query) {
            $query->latest()->take(5);
        }])->findOrFail($id);

        return view('customers.show', compact('customer'));
    }

    /**
     * Show the form for editing the specified customer
     */
    public function edit($id)
    {
        $customer = Customer::findOrFail($id);
        return view('customers.edit', compact('customer'));
    }

    /**
     * Update the specified customer in storage
     */
    public function update(Request $request, $id)
    {
        $customer = Customer::findOrFail($id);

        $validated = $request->validate([
            'kode_customer' => 'required|string|max:20|unique:customers,kode_customer,'.$customer->id,
            'name_customer' => 'required|string|max:50',
            'email' => 'nullable|email|max:50',
            'phone' => 'nullable|string|max:15',
            'address' => 'nullable|string'
        ]);

        $customer->update($validated);

        return redirect()
            ->route('customers.index')
            ->with('success', 'Customer berhasil diperbarui.');
    }

    /**
     * Remove the specified customer from storage
     */
    public function destroy($id)
    {
        $customer = Customer::findOrFail($id);

        // Check if customer has orders before deleting
        if ($customer->orders()->exists()) {
            return redirect()
                ->route('customers.index')
                ->with('error', 'Tidak dapat menghapus customer yang memiliki order.');
        }

        $customer->delete();

        return redirect()
            ->route('customers.index')
            ->with('success', 'Customer berhasil dihapus.');
    }
}